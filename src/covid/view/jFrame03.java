package covid.view;

import covid.controller.CountryJpaController;
import covid.controller.CoviddataJpaController;
import covid.controller.DBController;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.swing.DefaultComboBoxModel;
import covid.model.Country;
import covid.model.Coviddata;
import covid.service.Mappage;
import java.util.SortedMap;
import java.util.TreeMap;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

public class jFrame03 extends javax.swing.JFrame {

    EntityManagerFactory emf = Persistence.createEntityManagerFactory("CovidDBPU1");
    EntityManager em = emf.createEntityManager();
    EntityTransaction transaction = em.getTransaction();
    CountryJpaController countryController = new CountryJpaController(emf);
    CoviddataJpaController coviddataController = new CoviddataJpaController(emf);
    DBController dbController = new DBController();
    // για το γεμισμα του drop down menu επιλογης χωρας
    List<Country> countries;
    DefaultComboBoxModel comboboxmodel;
    DefaultComboBoxModel comboboxmodel1;

    /**
     * Creates new form jFrame03
     */
    public jFrame03() {
        initComponents();
        // ρυθμιση οταν κλεινει το jFrame να μην κλεινει ολο το app
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // γεμισμα των μενου με τις επιλογες
        fillCountriesMenu();
    }

    // γεμιζει το drop down menu για την επιλογη της κυριας χωρας
    private void fillCountriesMenu() {
        countries = countryController.findCountryEntities();
        comboboxmodel = new DefaultComboBoxModel();
        comboboxmodel1 = new DefaultComboBoxModel();
        // πρωτη επιλογη κενή
        comboboxmodel.addElement("");
        for (Country country : countries) {
            comboboxmodel1.addElement(country.getName());

            comboboxmodel.addElement(country.getName());
        }
        jComboBox1.setModel(comboboxmodel);

        // γεμισμα των επιλογων της λιστας
        jList1.setModel(comboboxmodel1);
    }

    // γεμιζει το drop down menu των ημερομηνιων
    private void filldates(LocalDate first, LocalDate last) {

        comboboxmodel = new DefaultComboBoxModel();
        comboboxmodel1 = new DefaultComboBoxModel();

        while (true) {
            if (first.equals(last.plusDays(1))) {
                break;
            }

            comboboxmodel.addElement(first.toString());
            comboboxmodel1.addElement(first.toString());

            first = first.plusDays(1);
        }

        // ημερομηνια απο
        jComboBox2.setModel(comboboxmodel);

        // ημερομηνια εως
        jComboBox3.setModel(comboboxmodel1);
        int i = jComboBox3.getItemCount();
        jComboBox3.setSelectedIndex(i - 1);
    }
//

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel1.setText("Επιλογή Κύριας Χώρας :");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel9.setText("Επιλογή Λοιπών Χωρών :");

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.setEnabled(false);
        jScrollPane1.setViewportView(jList1);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel3.setText("Επιλογή Ημερομηνίας :");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel4.setText("Από:");

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel5.setText("Έως:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.setEnabled(false);
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox3.setEnabled(false);
        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jButton2.setText("Προβολή  Χάρτη");
        jButton2.setEnabled(false);
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton2MousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel5))
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox3, 0, 90, Short.MAX_VALUE)
                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
            .addGroup(layout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59)
                .addComponent(jButton2)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // ολα τα event handler της 3ης οθονης
    // προβολη του χαρτη για ολες τις επιλογες
    private void jButton2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MousePressed
        // TODO add your handling code here:
        System.out.println("Πατηθηκε η προβολη σε χαρτη για πολλαπλες χωρες. Γ Οθονη");

        // αρχικη και τελικη ημερομηνια που επιλεγει ο χρηστης
        LocalDate first = LocalDate.parse(jComboBox2.getSelectedItem().toString());
        LocalDate last = LocalDate.parse(jComboBox3.getSelectedItem().toString());

        // εαν η τελικη ημερομηνια ειναι χρονικα νωριτερα απο την αρχικη
        // τοτε εμφανιζουμε σφαλμα στον χρηση σε μορφη παραθυρου ωστε να επιλεξει μια σωστη
        // ημερομηνια
        if (first.isAfter(last)) {
            JOptionPane.showMessageDialog(null, "Παρακαλω επιλεξτε σωστες ημερομηνιες."
                    + "\n Δεν μπορει η Εως ημερομηνια να ειναι \n"
                    + " νωριτερα απο την Από ημερομηνία ", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // αρχικα παιρνουμε τις χωρες απο το dropdownmenu και τη list
        String mainCountry = jComboBox1.getSelectedItem().toString();
        ArrayList<String> listOfCountries;
        if (!jList1.getSelectedValuesList().isEmpty()) {
            listOfCountries = (ArrayList) jList1.getSelectedValuesList();
        } else {
            listOfCountries = new ArrayList<>();
        }

        // προσθετουμε την κυρια χωρα στην κορυφη της λιστας
        if (!listOfCountries.contains(mainCountry)) {
            listOfCountries.add(0, mainCountry);
        } else {
            listOfCountries.remove(mainCountry);
            listOfCountries.add(0, mainCountry);
        }

        // για να παρουμε τα συνολικα δεδομενα της περιοδου που επιθυμουμε θα κανουμε τον απλο υπολογισμο
        // enddate.proodqty - startdate.proodqty
        int totalDeaths, totalRecovered, totalConfirmed;
        int i = 0;
        String resultlist[][] = new String[listOfCountries.size()][4];
        String lat, long1;

        // κανουμε τους υπολογισμους για τα στατιστικα
        for (String countryName : listOfCountries) {
            Country country = dbController.getCountryByName(countryName);

            // για να διατηρησουμε ημερολογιακη σειρα στους πινακες δεδομενων θα εισαγουμε τα δεδομενα
            // σε data structure που μας προσφερει η Java τα οποια αυτοματα διατηρουν μια σειρα
            SortedMap<LocalDate, Coviddata> deathsMap = new TreeMap<>();
            SortedMap<LocalDate, Coviddata> confirmedMap = new TreeMap<>();
            SortedMap<LocalDate, Coviddata> recoveredMap = new TreeMap<>();

            // αρχικη και τελικη ημερομηνια που επιλεγει ο χρηστης
            LocalDate date;

            // αναζητουμε τα δεδομενα για αυτη τη χώρα
            List<Coviddata> coviddataList;

            // deaths
            try {
                // αναζητουμε τα δεδομενα στη ΒΔ
                coviddataList = dbController.getCoviddataByCountryAndDatakind(country, 1);
                if (!coviddataList.isEmpty()) {

                    for (Coviddata coviddata : coviddataList) {

                        date = LocalDate.parse(coviddata.getTrndate());
                        deathsMap.put(date, coviddata);

                    }
                }
            } catch (Exception ex) {
                System.out.println("Δεν υπαρχουν δεδομενα Θανατων για τη χώρα");
            }

            // recovered
            try {
                // αναζητουμε τα δεδομενα στη ΒΔ
                coviddataList = dbController.getCoviddataByCountryAndDatakind(country, 2);
                if (!coviddataList.isEmpty()) {

                    for (Coviddata coviddata : coviddataList) {

                        date = LocalDate.parse(coviddata.getTrndate());
                        recoveredMap.put(date, coviddata);

                    }
                }

            } catch (Exception ex) {
                System.out.println("Δεν υπαρχουν δεδομενα Θανατων για τη χώρα");
            }

            // confirmed
            try {
                // αναζητουμε τα δεδομενα στη ΒΔ
                coviddataList = dbController.getCoviddataByCountryAndDatakind(country, 3);
                if (!coviddataList.isEmpty()) {

                    for (Coviddata coviddata : coviddataList) {

                        date = LocalDate.parse(coviddata.getTrndate());
                        confirmedMap.put(date, coviddata);

                    }
                }
            } catch (Exception ex) {
                System.out.println("Δεν υπαρχουν δεδομενα Θανατων για τη χώρα");
            }

            if (deathsMap.size() > 0) {
                // ποσοτητα τελικης - αρχικης ημερομηνιας ειναι το ποσο που ζηταμε να δειξουμε
                if (deathsMap.containsKey(first) && deathsMap.containsKey(last)) {

                    totalDeaths = deathsMap.get(last).getProodqty() - deathsMap.get(first).getProodqty();

                } else if (deathsMap.containsKey(first) && !deathsMap.containsKey(last)) {
                    // αν η τελικη ημερομηνια δεν υπαρχει αποθηκευμενη στη ΒΔ τοτε επιλεγουμε την πιο προσφατη ημερομηνια
                    // που υπαρχει στο
                    totalDeaths = deathsMap.get(deathsMap.lastKey()).getProodqty() - deathsMap.get(first).getProodqty();

                } else {
                    // αν η αρχικη ημερομηνια επιλογης ειναι χρονικα μετα απο την τελευταια αποθηκευμενη στη ΒΔ
                    // δεν υπαρχουν δεδομενα να δειξουμε αρα 0
                    totalDeaths = 0;
                }

            } else {
                // για καποιο λογο δεν εχουμε δεδομενα να δειξουμε
                totalDeaths = 0;
            }

            if (confirmedMap.size() > 0) {
                // ποσοτητα τελικης - αρχικης ημερομηνιας ειναι το ποσο που ζηταμε να δειξουμε
                if (confirmedMap.containsKey(first) && confirmedMap.containsKey(last)) {

                    totalConfirmed = confirmedMap.get(last).getProodqty() - confirmedMap.get(first).getProodqty();

                } else if (confirmedMap.containsKey(first) && !confirmedMap.containsKey(last)) {
                    // αν η τελικη ημερομηνια δεν υπαρχει αποθηκευμενη στη ΒΔ τοτε επιλεγουμε την πιο προσφατη ημερομηνια
                    // που υπαρχει στο
                    totalConfirmed = confirmedMap.get(confirmedMap.lastKey()).getProodqty() - confirmedMap.get(first).getProodqty();

                } else {
                    // αν η αρχικη ημερομηνια επιλογης ειναι χρονικα μετα απο την τελευταια αποθηκευμενη στη ΒΔ
                    // δεν υπαρχουν δεδομενα να δειξουμε αρα 0
                    totalConfirmed = 0;
                }
            } else {
                // για καποιο λογο δεν εχουμε δεδομενα να δειξουμε
                totalConfirmed = 0;
            }
            if (recoveredMap.size() > 0) {
                // ποσοτητα τελικης - αρχικης ημερομηνιας ειναι το ποσο που ζηταμε να δειξουμε
                if (recoveredMap.containsKey(first) && recoveredMap.containsKey(last)) {

                    totalRecovered = recoveredMap.get(last).getProodqty() - recoveredMap.get(first).getProodqty();

                } else if (recoveredMap.containsKey(first) && !recoveredMap.containsKey(last)) {
                    // αν η τελικη ημερομηνια δεν υπαρχει αποθηκευμενη στη ΒΔ τοτε επιλεγουμε την πιο προσφατη ημερομηνια
                    // που υπαρχει στο
                    totalRecovered = recoveredMap.get(recoveredMap.lastKey()).getProodqty() - recoveredMap.get(first).getProodqty();

                } else {
                    // αν η αρχικη ημερομηνια επιλογης ειναι χρονικα μετα απο την τελευταια αποθηκευμενη στη ΒΔ
                    // δεν υπαρχουν δεδομενα να δειξουμε αρα 0
                    totalRecovered = 0;
                }
            } else {
                // για καποιο λογο δεν εχουμε δεδομενα να δειξουμε
                totalRecovered = 0;
            }

            resultlist[i][0] = "'" + country.getName() + ", Deaths = " + totalDeaths
                    + " , Confirmed = " + totalConfirmed + ", Recovered = " + totalRecovered + "'";
            resultlist[i][1] = String.valueOf(country.getLat());
            resultlist[i][2] = String.valueOf(country.getLong1());
            resultlist[i][3] = String.valueOf(1);

            i++;
        }

        // τα lat και long της κυριας χωρας
        Country country = dbController.getCountryByName(listOfCountries.get(0));
        lat = String.valueOf(country.getLat());
        long1 = String.valueOf(country.getLong1());

        try {
            // κληση του Mappage για το ανοιγμα του χαρτη
            Mappage.loadGoogleMap(resultlist, lat, long1);
        } catch (IOException ex) {

            System.out.println(ex);
        }

    }//GEN-LAST:event_jButton2MousePressed

    // οταν αλλαζει το μενου της επιλογης της χωρας
    // γινεται ελεγχος αν ειναι αδεια επιλογη ή αν ειναι καποια χωρα
    // αν αυτη εχει δεδομενα για προβολη.
    // εμεις επιθυμουμε η κυρια χωρα σαν επιλογη να εχει δεδομενα
    // αλλιως δεν επιτρεπουμε στον χρηστη να πατησει το κουμπι προβολη του
    // χαρτη, απενεργοποιωντας το.
    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
        System.out.println("Αλλαγη στο μενου, αλλαγη επιλογων ημερομηνιας");

        // βρισκουμε τη χωρα για την οποια θα αναζητησουμε τα δεδομενα
        String countryName = jComboBox1.getSelectedItem().toString();

        // δεν επιλεγχθηκε χωρα αλλα το μενου ειναι το κενο
        if (countryName.equals("")) {
            jList1.setEnabled(false);
            jButton2.setEnabled(false);
            jComboBox2.setEnabled(false);
            jComboBox3.setEnabled(false);
            return;
        }

        Country country = dbController.getCountryByName(countryName);

        // προσθηκη ελεγχου για την υπαρξη δεδομενων covid αλλιως ενδεχεται ο χρηστης
        // να βρει μια χωρα με ημερομηνιες και με την αλλαγη στο μενου να βρει μια χωρα
        // χωρις. και να πατησει εμφανιση χαρτη. σε αυτη την περιπτωση η εφαρμογη θα "κρασαρει"
        try {
            List<Coviddata> list = dbController.getCoviddataByCountry(country);
            if (list.size() == 0) {
                jList1.setEnabled(false);
                jButton2.setEnabled(false);
                jComboBox2.setEnabled(false);
                jComboBox3.setEnabled(false);
                return;
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Κατι πηγε στραβα. Δοκιμασε να επανεκκινησεις την εφαρμογη.", "Ενημέρωση", JOptionPane.INFORMATION_MESSAGE);
        }

        // για να διατηρησουμε ημερολογιακη σειρα στους πινακες δεδομενων θα εισαγουμε τα δεδομενα
        // σε data structure που μας προσφερει η Java τα οποια αυτοματα διατηρουν μια σειρα
        SortedMap<LocalDate, Coviddata> deathsMap = new TreeMap<>();
        SortedMap<LocalDate, Coviddata> confirmedMap = new TreeMap<>();
        SortedMap<LocalDate, Coviddata> recoveredMap = new TreeMap<>();

        LocalDate date, first, last;
        // πρωτη και τελευταια ημερομηνια αντιστροφα για τις συγκρισεις, και επειτα για τις επιλογες των μενου
        first = LocalDate.now();
        last = LocalDate.of(2020, 01, 22);

        // αναζητουμε τα δεδομενα για αυτη τη χώρα
        List<Coviddata> coviddataList;

        // deaths
        try {
            // αναζητουμε τα δεδομενα στη ΒΔ
            coviddataList = dbController.getCoviddataByCountryAndDatakind(country, 1);
            if (!coviddataList.isEmpty()) {

                for (Coviddata coviddata : coviddataList) {

                    date = LocalDate.parse(coviddata.getTrndate());
                    deathsMap.put(date, coviddata);

                }
            }
        } catch (Exception ex) {
            System.out.println("Δεν υπαρχουν δεδομενα Θανατων για τη χώρα");
        }

        // recovered
        try {
            // αναζητουμε τα δεδομενα στη ΒΔ
            coviddataList = dbController.getCoviddataByCountryAndDatakind(country, 2);
            if (!coviddataList.isEmpty()) {

                for (Coviddata coviddata : coviddataList) {

                    date = LocalDate.parse(coviddata.getTrndate());
                    recoveredMap.put(date, coviddata);

                }
            }

        } catch (Exception ex) {
            System.out.println("Δεν υπαρχουν δεδομενα Θανατων για τη χώρα");
        }

        // confirmed
        try {
            // αναζητουμε τα δεδομενα στη ΒΔ
            coviddataList = dbController.getCoviddataByCountryAndDatakind(country, 3);
            if (!coviddataList.isEmpty()) {

                for (Coviddata coviddata : coviddataList) {

                    date = LocalDate.parse(coviddata.getTrndate());
                    confirmedMap.put(date, coviddata);

                }
            }
        } catch (Exception ex) {
            System.out.println("Δεν υπαρχουν δεδομενα Θανατων για τη χώρα");
        }

        // δημιουργια επιλογης και εισαγωγης ημερομηνιων στα μενου
        if (deathsMap.size() > 0) {

            // πρωτη και τελευταια ημερομηνια για το πεδιο επιλογης
            first = deathsMap.firstKey();
            last = deathsMap.lastKey();
        }
        if (confirmedMap.size() > 0) {

            // ελεγχος για ημερομηνιες
            if (deathsMap.firstKey().isBefore(first)) {
                first = deathsMap.firstKey();
            }
            if (deathsMap.lastKey().isAfter(last)) {
                last = deathsMap.lastKey();
            }
        }

        if (recoveredMap.size() > 0) {

            // ελεγχος για ημερομηνιες
            if (deathsMap.firstKey().isBefore(first)) {
                first = deathsMap.firstKey();
            }
            if (deathsMap.lastKey().isAfter(last)) {
                last = deathsMap.lastKey();
            }
        }

        if (recoveredMap.size() > 0 || confirmedMap.size() > 0 || deathsMap.size() > 0) {
            filldates(first, last);
            jList1.setEnabled(true);
            jButton2.setEnabled(true);
            jComboBox2.setEnabled(true);
            jComboBox3.setEnabled(true);
        }


    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        // TODO add your handling code here:
        // σε περιπτωση αλλαγης παραθυρου, και επιλογης διαγραφης μιας χωρας
        // οταν επανερχεται το focus σε αυτο το παραθυρο για την αποφυγη σφαλματων
        // επανεισαγουμε το μενου των χωρων.
        jList1.setEnabled(false);
        jButton2.setEnabled(false);
        jComboBox2.setEnabled(false);
        jComboBox3.setEnabled(false);
        fillCountriesMenu();
    }//GEN-LAST:event_formWindowGainedFocus

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        // TODO add your handling code here:
        // εαν οποιοδηποτε απο τα κουμπια ειναι απενεργοποιημενα δεν κανουμε τπτ
        if (!jComboBox2.isEnabled() || !jComboBox3.isEnabled()) {
            return;
        }
        LocalDate first = LocalDate.parse(jComboBox2.getSelectedItem().toString());
        LocalDate last = LocalDate.parse(jComboBox3.getSelectedItem().toString());

        // εαν η τελικη ημερομηνια ειναι χρονικα νωριτερα απο την αρχικη
        // τοτε σιωπηρα χωρις να ειδοποιησουμε το χρηστη θετουμε την ημερομηνια
        // ιση με την αρχικη
        if (first.isAfter(last)) {
            jComboBox3.setSelectedItem(jComboBox2.getSelectedIndex());
            jComboBox3.repaint();
            return;
        }
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
        // TODO add your handling code here:
        // κληση της jComboBox2ItemStateChanged επειδη θελουμε την εκτελεση της ιδιας λειτουργιας
        jComboBox2ItemStateChanged(evt);
    }//GEN-LAST:event_jComboBox3ItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jFrame03.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jFrame03.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jFrame03.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jFrame03.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jFrame03().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
